<!--  60초마다 설정 파일의 변경을 확인 하여 변경시 갱신  -->
<configuration scan="true" scanPeriod="60 seconds">

    <!--  set profile  -->
    <springProfile name="local">
        <property resource="logback-local.properties"/>
    </springProfile>
    <springProfile name="dev">
        <property resource="logback-dev.properties"/>
    </springProfile>
<!--    <property resource="logback-${spring.profiles.active}.properties"/>-->


    <springProperty scope="context" name="LOG_LEVEL" source="logging.level.root"/>

    <!--  log file path  -->
    <property name="DEFAULT_LOG_PATH" value="${log.config.path}"/>
    <property name="BATCH_LOG_PATH" value="${log.config.batch.path}"/>
    <property name="API_LOG_PATH" value="${log.config.api.path}"/>
    <property name="DB_LOG_PATH" value="${log.config.db.path}"/>

    <!--  log file name  -->
    <property name="DEFAULT_LOG_FILE_NAME" value="${log.config.filename}"/>
    <property name="BATCH_LOG_FILE_NAME" value="${log.config.batch.filename}"/>
    <property name="API_LOG_FILE_NAME" value="${log.config.api.filename}"/>
    <property name="DB_LOG_FILE_NAME" value="${log.config.db.filename}"/>

    <!--  err log file name  -->
    <property name="ERR_DEFAULT_LOG_FILE_NAME" value="${log.config.err.filename}"/>
    <property name="ERR_BATCH_LOG_FILE_NAME" value="${log.config.err.batch.filename}"/>
    <property name="ERR_API_LOG_FILE_NAME" value="${log.config.err.api.filename}"/>
    <property name="ERR_DB_LOG_FILE_NAME" value="${log.config.err.db.filename}"/>

    <!--  pattern  -->
    <property name="LOG_PATTERN" value="%-5level %d{yy-MM-dd HH:mm:ss}[%thread] [%logger{0}:%line] - %msg%n"/>

    <!--  Console Appender  -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${LOG_PATTERN}</pattern>
        </encoder>
    </appender>

    <!--  Default File Appender  -->
    <appender name="DEFAULT_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--  파일경로 설정  -->
        <file>${DEFAULT_LOG_PATH}/${DEFAULT_LOG_FILE_NAME}.log</file>
        <!--  출력패턴 설정 -->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${LOG_PATTERN}</pattern>
        </encoder>
        <!--  Rolling 정책  -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--  .gz,.zip 등을 넣으면 자동 일자별 로그파일 압축  -->
            <fileNamePattern>${DEFAULT_LOG_PATH}/${DEFAULT_LOG_FILE_NAME}.%d{yyyy-MM-dd}_%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!--  파일당 최고 용량 kb, mb, gb  -->
                <maxFileSize>1MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!--  일자별 로그파일 최대 보관주기(~일), 해당 설정일 이상된 파일은 자동으로 제거 -->
            <maxHistory>30</maxHistory>
            <!-- <MinIndex>1</MinIndex> <MaxIndex>10</MaxIndex> -->
        </rollingPolicy>
    </appender>

    <!--  Batch File Appender  -->
    <appender name="BATCH_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--  파일경로 설정  -->
        <file>${BATCH_LOG_PATH}/${BATCH_LOG_FILE_NAME}.log</file>
        <!--  출력패턴 설정 -->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${LOG_PATTERN}</pattern>
        </encoder>
        <!--  Rolling 정책  -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--  .gz,.zip 등을 넣으면 자동 일자별 로그파일 압축  -->
            <fileNamePattern>${BATCH_LOG_PATH}/${BATCH_LOG_FILE_NAME}.%d{yyyy-MM-dd}_%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!--  파일당 최고 용량 kb, mb, gb  -->
                <maxFileSize>1MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!--  일자별 로그파일 최대 보관주기(~일), 해당 설정일 이상된 파일은 자동으로 제거 -->
            <maxHistory>30</maxHistory>
            <!-- <MinIndex>1</MinIndex> <MaxIndex>10</MaxIndex> -->
        </rollingPolicy>
    </appender>

    <!--  API File Appender  -->
    <appender name="API_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--  파일경로 설정  -->
        <file>${API_LOG_PATH}/${API_LOG_FILE_NAME}.log</file>
        <!--  출력패턴 설정 -->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${LOG_PATTERN}</pattern>
        </encoder>
        <!--  Rolling 정책  -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--  .gz,.zip 등을 넣으면 자동 일자별 로그파일 압축  -->
            <fileNamePattern>${API_LOG_PATH}/${API_LOG_FILE_NAME}.%d{yyyy-MM-dd}_%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!--  파일당 최고 용량 kb, mb, gb  -->
                <maxFileSize>1MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!--  일자별 로그파일 최대 보관주기(~일), 해당 설정일 이상된 파일은 자동으로 제거 -->
            <maxHistory>30</maxHistory>
            <!-- <MinIndex>1</MinIndex> <MaxIndex>10</MaxIndex> -->
        </rollingPolicy>
    </appender>

    <!--  DB File Appender  -->
    <appender name="DB_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--  파일경로 설정  -->
        <file>${DB_LOG_PATH}/${DB_LOG_FILE_NAME}.log</file>
        <!--  출력패턴 설정 -->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${LOG_PATTERN}</pattern>
        </encoder>
        <!--  Rolling 정책  -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--  .gz,.zip 등을 넣으면 자동 일자별 로그파일 압축  -->
            <fileNamePattern>${DB_LOG_PATH}/${DB_LOG_FILE_NAME}.%d{yyyy-MM-dd}_%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!--  파일당 최고 용량 kb, mb, gb  -->
                <maxFileSize>1MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!--  일자별 로그파일 최대 보관주기(~일), 해당 설정일 이상된 파일은 자동으로 제거 -->
            <maxHistory>30</maxHistory>
            <!-- <MinIndex>1</MinIndex> <MaxIndex>10</MaxIndex> -->
        </rollingPolicy>
    </appender>


    <!--  에러의 경우 파일에 로그 처리  -->
    <appender name="Error" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>error</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <file>${DEFAULT_LOG_PATH}/${ERR_DEFAULT_LOG_FILE_NAME}.log</file>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${LOG_PATTERN}</pattern>
        </encoder>
        <!--  Rolling 정책  -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--  .gz,.zip 등을 넣으면 자동 일자별 로그파일 압축  -->
            <fileNamePattern>${DEFAULT_LOG_PATH}/${ERR_DEFAULT_LOG_FILE_NAME}.%d{yyyy-MM-dd}_%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!--  파일당 최고 용량 kb, mb, gb  -->
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!--  일자별 로그파일 최대 보관주기(~일), 해당 설정일 이상된 파일은 자동으로 제거 -->
            <maxHistory>60</maxHistory>
        </rollingPolicy>
    </appender>

    <appender name="BATCH_Error" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>error</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <file>${BATCH_LOG_PATH}/${ERR_BATCH_LOG_FILE_NAME}.log</file>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${LOG_PATTERN}</pattern>
        </encoder>
        <!--  Rolling 정책  -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--  .gz,.zip 등을 넣으면 자동 일자별 로그파일 압축  -->
            <fileNamePattern>${BATCH_LOG_PATH}/${ERR_BATCH_LOG_FILE_NAME}.%d{yyyy-MM-dd}_%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!--  파일당 최고 용량 kb, mb, gb  -->
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!--  일자별 로그파일 최대 보관주기(~일), 해당 설정일 이상된 파일은 자동으로 제거 -->
            <maxHistory>60</maxHistory>
        </rollingPolicy>
    </appender>

    <appender name="API_Error" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>error</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <file>${API_LOG_PATH}/${ERR_API_LOG_FILE_NAME}.log</file>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${LOG_PATTERN}</pattern>
        </encoder>
        <!--  Rolling 정책  -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--  .gz,.zip 등을 넣으면 자동 일자별 로그파일 압축  -->
            <fileNamePattern>${API_LOG_PATH}/${ERR_API_LOG_FILE_NAME}.%d{yyyy-MM-dd}_%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!--  파일당 최고 용량 kb, mb, gb  -->
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!--  일자별 로그파일 최대 보관주기(~일), 해당 설정일 이상된 파일은 자동으로 제거 -->
            <maxHistory>60</maxHistory>
        </rollingPolicy>
    </appender>

    <appender name="DB_Error" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>error</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <file>${DB_LOG_PATH}/${ERR_DB_LOG_FILE_NAME}.log</file>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${LOG_PATTERN}</pattern>
        </encoder>
        <!--  Rolling 정책  -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--  .gz,.zip 등을 넣으면 자동 일자별 로그파일 압축  -->
            <fileNamePattern>${DB_LOG_PATH}/${ERR_DB_LOG_FILE_NAME}.%d{yyyy-MM-dd}_%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!--  파일당 최고 용량 kb, mb, gb  -->
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!--  일자별 로그파일 최대 보관주기(~일), 해당 설정일 이상된 파일은 자동으로 제거 -->
            <maxHistory>60</maxHistory>
        </rollingPolicy>
    </appender>

    <!--  root레벨 설정  -->
    <root level="${LOG_LEVEL}">
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="DEFAULT_FILE"/>
        <appender-ref ref="Error"/>
    </root>

    <!--  특정패키지 로깅레벨 설정  -->
    <logger name="com.frame.batch.jobs" level="INFO">
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="BATCH_FILE"/>
        <appender-ref ref="BATCH_Error"/>
    </logger>

    <logger name="com.frame.batch.controller" level="INFO">
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="API_FILE"/>
        <appender-ref ref="API_Error"/>
    </logger>

    <logger name="com.frame.batch.dao" level="INFO" additivity="false">
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="DB_FILE"/>
        <appender-ref ref="DB_Error"/>
    </logger>
</configuration>